-- Auto Shield (multi schedule, standalone + auto self-destroy)
-- M·ªói entry trong schedule = {start_time, end_time}
-- start_time: th·ªùi ƒëi·ªÉm b·∫Øt ƒë·∫ßu (gi√¢y k·ªÉ t·ª´ khi script ch·∫°y)
-- end_time: th·ªùi ƒëi·ªÉm k·∫øt th√∫c (gi√¢y k·ªÉ t·ª´ khi script ch·∫°y)

local schedule = {
    {71, 79},   -- b·∫≠t l√∫c 71s, t·∫Øt l√∫c 79s
    {94, 102},  -- b·∫≠t l√∫c 94s, t·∫Øt l√∫c 102s
    {115, 124}, -- b·∫≠t l√∫c 115s, t·∫Øt l√∫c 124s
}

-- üîç T√¨m remote: ReplicatedStorage -> BridgeNet2 -> dataRemoteEvent
local remote
pcall(function()
    local rs = game:GetService("ReplicatedStorage")
    local bridge = rs:FindFirstChild("BridgeNet2")
    if bridge then
        remote = bridge:FindFirstChild("dataRemoteEvent")
    end
    if not remote then
        for _, v in ipairs(rs:GetDescendants()) do
            if v.Name == "dataRemoteEvent" then
                remote = v
                break
            end
        end
    end
end)

-- üõ°Ô∏è H√†m b·∫≠t/t·∫Øt khi√™n an to√†n
local function safeFireShield(state)
    if remote then
        pcall(function()
            remote:FireServer({ state, "\024" })
        end)
    else
        if not safeFireShield._warned then
            safeFireShield._warned = true
            warn("[Auto Shield] Kh√¥ng t√¨m th·∫•y dataRemoteEvent; kh√¥ng g·ª≠i ƒë∆∞·ª£c y√™u c·∫ßu.")
        end
    end
end

-- üß≠ MAIN LOOP (x·ª≠ l√Ω theo nhi·ªÅu kho·∫£ng th·ªùi gian)
local tick0 = tick()
local total = #schedule
local finished = 0

for i, window in ipairs(schedule) do
    local start_time, end_time = window[1], window[2]

    if type(start_time) == "number" and type(end_time) == "number" and end_time > start_time then
        task.spawn(function()
            -- ch·ªù t·ªõi l√∫c b·∫≠t
            local wait_time = tick0 + start_time - tick()
            if wait_time > 0 then task.wait(wait_time) end

            print(("[Auto Shield] #%d üü¢ B·∫¨T (%.1fs ‚Üí %.1fs)"):format(i, start_time, end_time))
            safeFireShield(true)

            -- ch·ªù t·ªõi l√∫c t·∫Øt
            local remain = tick0 + end_time - tick()
            if remain > 0 then task.wait(remain) end

            safeFireShield(false)
            print(("[Auto Shield] #%d üî¥ T·∫ÆT (%.1fs)"):format(i, end_time))
            finished += 1

            -- ‚úÖ N·∫øu t·∫•t c·∫£ schedule ƒë·ªÅu ho√†n t·∫•t ‚Üí t·ª± x√≥a script
            if finished >= total then
                print("[Auto Shield] ‚úÖ To√†n b·ªô schedule ƒë√£ ho√†n t·∫•t, ƒëang t·ª± d·ªçn v√† xo√° script...")

                task.delay(1, function()
                    -- X√≥a bi·∫øn & m√¥i tr∆∞·ªùng th·ª±c thi
                    remote, safeFireShield, schedule = nil, nil, nil
                    table.clear(getfenv())
                    collectgarbage("collect")

                    print("[Auto Shield] üßπ Script ƒë√£ ƒë∆∞·ª£c t·ª± xo√° ho√†n to√†n kh·ªèi b·ªô nh·ªõ.")
                end)
            end
        end)
    else
        warn(("[Auto Shield] Schedule #%d kh√¥ng h·ª£p l·ªá (start=%s, end=%s)"):format(i, tostring(start_time), tostring(end_time)))
    end
end
