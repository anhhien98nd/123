-- Auto Shield (scheduled windows, standalone + auto self-destroy)
-- M·ªói entry trong `schedule` l√† {start_seconds, end_seconds} t√≠nh t·ª´ l√∫c script b·∫Øt ƒë·∫ßu (tick0).
-- Khi c√≥ √≠t nh·∫•t 1 c·ª≠a s·ªï ƒëang active => g·ª≠i shield = true. Khi kh√¥ng c√≤n c·ª≠a s·ªï n√†o => g·ª≠i shield = false.

local schedule = {
    {59, 67},   -- b·∫≠t l√∫c 59s, t·∫Øt l√∫c 67s
    {83, 91},   -- b·∫≠t l√∫c 83s, t·∫Øt l√∫c 91s
    {105, 113}, -- b·∫≠t l√∫c 105s, t·∫Øt l√∫c 113s
}

-- üîç T√¨m remote: ReplicatedStorage -> BridgeNet2 -> dataRemoteEvent
local remote
pcall(function()
    local rs = game:GetService("ReplicatedStorage")
    local bridge = rs:FindFirstChild("BridgeNet2")
    if bridge then
        remote = bridge:FindFirstChild("dataRemoteEvent")
    end
    if not remote then
        for _, v in ipairs(rs:GetDescendants()) do
            if v.Name == "dataRemoteEvent" then
                remote = v
                break
            end
        end
    end
end)

-- üõ°Ô∏è H√†m b·∫≠t/t·∫Øt shield
local function safeFireShield(state)
    if remote then
        pcall(function()
            remote:FireServer({ state, "\024" })
        end)
    else
        if not safeFireShield._warned then
            safeFireShield._warned = true
            warn("[Auto Shield] Kh√¥ng t√¨m th·∫•y dataRemoteEvent; kh√¥ng g·ª≠i ƒë∆∞·ª£c y√™u c·∫ßu.")
        end
    end
end

-- üß≠ MAIN LOGIC
local activeCount = 0
local tick0 = tick()
local finished = 0
local totalSchedules = #schedule

for i, win in ipairs(schedule) do
    local startT, endT = win[1], win[2]
    if type(startT) ~= "number" or type(endT) ~= "number" or endT <= startT then
        warn(("[Auto Shield] Schedule #%d kh√¥ng h·ª£p l·ªá (start=%s end=%s) - b·ªè qua"):format(i, tostring(startT), tostring(endT)))
    else
        task.spawn(function()
            -- Ch·ªù ƒë·∫øn l√∫c b·∫Øt ƒë·∫ßu
            local waitUntil = tick0 + startT
            local toWait = waitUntil - tick()
            if toWait > 0 then task.wait(toWait) end

            if tick() >= tick0 + endT then
                warn(("[Auto Shield] Schedule #%d ƒë√£ tr√¥i qua tr∆∞·ªõc khi b·∫Øt ƒë·∫ßu - b·ªè qua."):format(i))
                finished += 1
                return
            end

            -- B·∫≠t shield n·∫øu activeCount t·ª´ 0 -> 1
            activeCount += 1
            if activeCount == 1 then
                print(("[Auto Shield] #%d üü¢ B·∫¨T (%.1fs -> %.1fs) ‚Üí g·ª≠i SHIELD = true"):format(i, startT, endT))
                safeFireShield(true)
            else
                print(("[Auto Shield] #%d ON (%.1fs -> %.1fs) ‚Üí activeCount=%d"):format(i, startT, endT, activeCount))
            end

            -- Ch·ªù t·ªõi l√∫c k·∫øt th√∫c
            local remain = (tick0 + endT) - tick()
            if remain > 0 then task.wait(remain) end

            -- Gi·∫£m activeCount; n·∫øu v·ªÅ 0 th√¨ t·∫Øt shield
            activeCount = math.max(0, activeCount - 1)
            if activeCount == 0 then
                print(("[Auto Shield] #%d üî¥ T·∫ÆT (%.1fs) ‚Üí g·ª≠i SHIELD = false"):format(i, endT))
                safeFireShield(false)
            else
                print(("[Auto Shield] #%d OFF (%.1fs) ‚Üí c√≤n activeCount=%d"):format(i, endT, activeCount))
            end

            -- ‚úÖ Ki·ªÉm tra ho√†n t·∫•t t·∫•t c·∫£ schedule
            finished += 1
            if finished >= totalSchedules then
                print("[Auto Shield] ‚úÖ T·∫•t c·∫£ schedule ƒë√£ ho√†n th√†nh. ƒêang t·ª± d·ªçn v√† xo√° script...")

                task.delay(1, function()
                    remote, safeFireShield, schedule = nil, nil, nil
                    table.clear(getfenv())
                    collectgarbage("collect")
                    print("[Auto Shield] üßπ Script ƒë√£ ƒë∆∞·ª£c t·ª± xo√° ho√†n to√†n kh·ªèi b·ªô nh·ªõ.")
                end)
            end
        end)
    end
end
